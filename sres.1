.TH "SRES" "1" "2020-07-13" "sres" "User Commands"
.SH NAME
sres \- simple recurring event scheduler
.SH SYNOPSIS
\fBsres\fR [\-f \fIFMT\fR]
.br
\fBsres\fR [\-f \fIFMT\fR] [\fIBEGIN\fR] \fIEND\fR
.SH DESCRIPTION
Take a description of events over standard input, and then output when the
events occur between \fIBEGIN\fR and \fIEND\fR.
\fIBEGIN\fR defaults to now; \fIEND\fR defaults to one day from now.
.SS Events
Event descriptions are given to sres over standard input in the following
format:
.PP
.in +4n
.EX
\fIMINS\fR \fIHOURS\fR \fIDAYS-OF-WEEK\fR \fIDAYS-OF-MONTH\fR \fIMONTHS\fR \fIYEARS\fR \fIDURATION\fR Event1
\fIMINS\fR \fIHOURS\fR \fIDAYS-OF-WEEK\fR \fIDAYS-OF-MONTH\fR \fIMONTHS\fR \fIYEARS\fR \fIDURATION\fR
# A line comment: "#" must be the first non-whitespace character.
\fIMINS\fR \fIHOURS\fR \fIDAYS-OF-WEEK\fR \fIDAYS-OF-MONTH\fR \fIMONTHS\fR \fIYEARS\fR \fIDURATION\fR Event2
[Etc...]
.EE
.in
.PP
Each event is one line starting with seven fields, as shown above.
The first six fields describe the start time of an event in a cron-like format,
and the last field specifies the duration of the event associated with the
preceding start time description.
Everything on the line after the seven fields constitutes the event
description.
An event with no description has the same description as the previous event,
and events defined in this way are deduplicated.
For example, "Event1" above has two lines describing when and for how long
it occurs.
(The very first event in the input must have a description.)
.PP
Here are some examples of the first seven fields:
.PP
.TP
.B "00 13 tue,fri * jan-apr,sep 1986 3h30m"
At 1:00\ p.m. on Tuesdays and Fridays in January through April and September in
1986 for 3.5\ hours.
.TP
.B "00-29 08 * 29 feb 2020 -1m1w"
At each of the first 30\ minutes in the 8th\ hour of 29\ Feburary\ 2020 for
1\ minute less than a week.
.TP
.B "* * * * * 2030 0m"
At every minute in 2030 for 0\ minutes.
.TP
.B "54 18 mon 1 apr 2001 2d"
At 6:54\ p.m. on Monday, 1\ April\ 2001 for 2\ days.
(This one never happens since 1\ Apr\ 2001 is actually a Sunday.)
.PP
To be precise, the permissible values for the first six fields are as follows:
.PP
.TS
tab(;);
l l
--
l l.
Field;Values
mins;0, 1, ..., 59
hours;0, 1, ..., 23
days-of-week;sun, mon, tue, wed, thu, fri, sat
days-of-month;1, 2, ..., 31
months;\
T{
jan, feb, mar, apr, may, jun,
.br
jul, aug, sep, oct, nov, dec
T}
years;..., 2BC, 1BC, 1AD, 2AD, ...
.TE
.PP
Days of week and months are case insensitive.
When a year doesn't have an era suffix (BC/AD), AD is assumed.
.PP
In addition, the above values can be listed (using ",") and put in a range
(using "\-").
.PP
Durations are specified as a string of one or more undelimited integer/unit
pair components.
The value of the whole duration is the sum of the durations represented by each
component.
The valid units are \fBm\fR (minute), \fBh\fR (hour), \fBd\fR (day),
and \fBw\fR (week).
While components may be negative, the resulting duration must be nonnegative.
.SS "Timespan Format (Begin and End Arguments)"
The format of both \fIBEGIN\fR and \fIEND\fR is
[\fITIME\fR]/[\fIDATE\fR][(+|-)\fIOFFSET\fR], where \fITIME\fR is
[\fIHOUR\fR[:\fIMIN\fR][am|pm]], \fIHOUR\fR is
[\fIDOM\fR][\fIMON\fR[\fIYEAR\fR]], and \fIOFFSET\fR is a duration
(same format as described above).
(The square brackets are not required or valid; they are used here to denote
that the contents are optional.)
.PP
If \fITIME\fR is omitted, it defaults to now.
If \fIDATE\fR is omitted, it defaults to today.
If \fIHOUR\fR is provided, \fIMIN\fR defaults to 0.
If \fIDOM\fR is provided, \fIMON\fR and \fIYEAR\fR default to their current
values.
If \fIMON\fR is provided, \fIDOM\fR defaults to 0 and \fIYEAR\fR defaults to
its current value.
In all cases, \fIOFFSET\fR defaults to 0m.
.PP
In particular, "/" means now and "0/" means the beginning of today.
.SS "Output Format (\-f Option)"
sres prints out event occurrences separated by newlines.
Each event occurrence is displayed according to a format specified using the
following printf-style conversion specifiers:
.PP
.RS
.IP \fB%%\fR
a '%' character
.IP \fB%n\fR
a newline character
.IP \fB%t\fR
a tab character
.IP \fB%x\fR
text associated with event
.IP \fB%d\fR
duration in minutes
.IP \fB%b_\fR
_ corresponding to the beginning of the event
.IP \fB%e_\fR
_ corresponding to the end of the event
.RE
.PP
Valid substitutions for _ in \fB%b_\fR and \fB%e_\fR:
.PP
.RS
.IP \fBm\fR
minutes (00-59)
.IP \fBh\fR
hours (01-12)
.IP \fBH\fR
hours (00-23)
.IP \fBp\fR
a.m. or p.m.
.IP \fBd\fR
day of week (Sunday, Monday, Tuesday, etc.)
.IP \fBD\fR
day of month (01-31)
.IP \fBM\fR
month (January, February, March, etc.)
.IP \fBy\fR
integer year (..., -1 => 2BC, 0 => 1BC, 1 => 1AD, ...)
.IP \fBY\fR
positive integer year (1 means 1BC or 1AD, etc.)
.IP \fBe\fR
era (b.c. or a.d.)
.IP \fBu\fR
Unix timestamp
.RE
.PP
Valid prefix modifiers for _ in \fB%b_\fR and \fB%e_\fR:
.PP
.RS
.IP \fB0\fR
zero-based numeric
.RS
.IP \fB0d\fR
"Sunday" -> 0, "Monday" -> 1, etc.
.IP \fB0M\fR
"January" -> 00, "February" -> 01, etc.
.RE
.IP \fB1\fR
one-based numeric
.RS
.IP \fB1d\fR
"Sunday" -> 1, "Monday" -> 2, etc.
.IP \fB1M\fR
"January" -> 01, "February" -> 02, etc.
.RE
.IP \fBb\fR
change leading zeros to blanks (spaces)
.IP \fBc\fR
change case
.RS
.IP \fBcp\fR
"a.m." -> "A.M.", "p.m." -> "P.M."
.IP \fBcd\fR
"Sunday" -> "sunday", "Monday" -> "monday", etc.
.IP \fBcM\fR
"January" -> "january", "February" -> "february", etc.
.IP \fBce\fR
"b.c." -> "B.C.", "a.d." -> "A.D."
.RE
.IP \fBs\fR
short
.RS
.IP \fBsm\fR, \fBsh\fR, \fBsH\fR, \fBsD\fR
drops leading zero
.IP \fBsp\fR
"a.m." -> "am", "p.m." -> "pm"
.IP \fBsd\fR
"Sunday" -> "Sun", "Monday" -> "Mon", etc.
.IP \fBsM\fR
"January" -> "Jan", "February" -> "Feb", etc.
.IP \fBsy\fR and \fBsY\fR
drops century number (1986 -> 86, 2009 -> 09, etc.)
.IP \fBse\fR
"b.c." -> "bc", "a.d." -> "ad"
.RE
.RE
.PP
The prefix modifiers can be combined (in an arbitrary order) and the effect
is probably what you expect.
Invalid modifiers are ignored.
